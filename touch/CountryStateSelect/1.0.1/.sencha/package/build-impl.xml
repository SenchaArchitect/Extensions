<?xml version="1.0" encoding="utf-8"?>
<!--
********************************** DO NOT EDIT **********************************

This file will be replaced during upgrades so DO NOT EDIT this file. If you need to
adjust the process, reading and understanding this file is the first step.

In most cases, the adjustments can be achieved by setting properties or providing one
of the "hooks" in the form of a "-before-" or "-after-" target. Whenever possible, look
for one of these solutions.

Failing that, you can copy whole targets to your build.xml file and it will overrride
the target provided here. Doing that can create problems for upgrading to newer
versions of Cmd so it is not recommended but it will be easier to manage than editing
this file in most cases.
-->
<project name="pkg-build-impl">
    
    <import file="sub-builds.xml"/>
    
    <!--
    Init-Local
    -->
    <target name="-before-init-local"/>
    <target name="-after-init-local"/>
    <target name="-init-local">
        <property file="${basedir}/local.properties"/>

        <script language="javascript">
            var f = new java.io.File(project.getProperty("basedir"));
            var sub = ".sencha/workspace/sencha.cfg";

            for (var p = f; p; p = p.getParentFile()) {
                var t = new java.io.File(p, sub);
                if (t.exists()) {
                    // we found the workspace folder!

                    t = new java.io.File(p, "local.properties");
                    if (t.exists()) {
                        var loader = project.createTask("property");
                        loader.setFile(new java.io.File(t.getCanonicalPath()));
                        loader.execute();
                    }

                    break;
                }
            }
        </script>
    </target>
    <target name="init-local" 
            depends="-before-init-local,-init-local,-after-init-local"/>

    <!--
    Init Sencha Cmd
    -->
    <target name="find-cmd" unless="cmd.dir">
        <!--
        Run "sencha which" to find the Sencha Cmd basedir and get "cmd.dir" setup. We
        need to execute the command with curdir set properly for Cmd to pick up that we
        are running for an application.
        -->
        <exec executable="sencha" dir="${basedir}">
            <arg value="which"/><arg value="-o=$cmddir$"/>
        </exec>

        <!-- Now read the generated properties file and delete it -->
        <property file="$cmddir$"/>
        <delete file="$cmddir$"/>
    </target>

    <target name="init-cmd" depends="find-cmd">
        <echo>Using Sencha Cmd from ${cmd.dir}</echo>
        <taskdef resource="com/sencha/ant/antlib.xml" 
                 classpath="${cmd.dir}/sencha.jar"
                 loaderref="senchaloader"/>

        <!-- Some operations require sencha.jar in the Ant classpath -->
        <x-extend-classpath>
            <jar path="${cmd.dir}/sencha.jar"/>
        </x-extend-classpath>
    </target>

    <!--
    Apply Version
    -->
    <target name="-before-apply-version"/>
    <target name="-after-apply-version"/>
    <target name="apply-version" if="build.version">
        <if>
            <not>
                <equals arg1="${build.version}" arg2="${package.version}"/>
            </not>
            <then>
                <echo>Switch package version from ${package.version} to ${build.version}</echo>
                <antcall target="-before-apply-version"/>

                <x-set-json-version file="${package.dir}/package.json"
                                    version="${build.version}"/>

                <antcall target="-after-apply-version"/>
            </then>
        </if>
    </target>

    <!--
    Init
    -->
    <target name="-before-init"/>
    <target name="-after-init"/>
    <target name="-init">
        <antcall target="apply-version"/>

        <x-sencha-init prefix=""/>

        <property name="build.version" value="${package.version}"/>
        
        <!-- default the build environment to production if it is unset by this point -->
        <property name="args.environment" value="production"/>

        <x-load-properties file="${package.config.dir}/${args.environment}.properties" required="0"/>
        <x-load-properties file="${package.config.dir}/build.properties" required="0"/>
        
        <!--
        See if there is a ./resources subfolder
        -->
        <if>
            <not>
                <available file="${package.resources.dir}" type="dir"/>
            </not>
            <then>
                <property name="skip.resources" value="1"/>
                <property name="skip.slice" value="1"/>
            </then>
        </if>

        
        <!--
        See if there is a ./sass subfolder
        -->
        <if>
            <not>
                <available file="${package.sass.dir}" type="dir"/>
            </not>
            <then>
                <property name="skip.sass" value="1"/>
            </then>
        </if>

        <!--
        See if there is an ./examples subfolder full of example applications.
        -->
        <if>
            <not>
                <available file="${package.examples.dir}" type="dir"/>
            </not>
            <then>
                <property name="skip.examples" value="1"/>
            </then>
        </if>

        <!--
        See if there is a ./packages subfolder full of packages. This is only allowed
        for framework packages.
        -->
        <if>
            <not>
                <and>
                    <equals arg1="${package.type}" arg2="framework"/>
                    <available file="${package.subpkgs.dir}" type="dir"/>
                </and>
            </not>
            <then>
                <property name="skip.subpkgs" value="1"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="package.framework"/>
            </not>
            <then>
                <property name="skip.style" value="1"/>
            </then>
        </if>
        
        <if>
            <isset property="skip.style"/>
            <then>
                <property name="skip.sass" value="1"/>
                <property name="skip.capture" value="1"/>
                <property name="skip.slice" value="1"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="package.base.names"/>
            </not>
            <then>
                <property name="skip.inherit" value="1"/>
            </then>
        </if>

        <fileset id="pkg.files" dir="${package.dir}" includes="${pkg.includes}"
                 excludes="${pkg.excludes}">
            <exclude name="**/.sass-cache/**/*"/>
            <exclude name="**/.sass-cache"/>
            <exclude name="**/theme-capture.*"/>
        </fileset>

        <macrodef name="x-run-sub-build">
            <attribute name="dir"/>
            <attribute name="target"/>
            <element name="properties" implicit="true"/>
            <sequential>
                <if>
                    <available file="@{dir}/build.xml"/>
                    <then>
                        <ant dir="@{dir}" 
                             inheritall="false" 
                             inheritrefs="true"
                             target="@{target}">
                            <properties/>
                        </ant>
                    </then>
                </if>
            </sequential>
        </macrodef>

        <macrodef name="x-sub-build">
            <attribute name="dir"/>
            <attribute name="target" default="build"/>
            <attribute name="inherit-version" default="0"/>
            <sequential>
                <if>
                    <x-is-true value="@{inherit-version}"/>
                    <then>
                        <x-run-sub-build dir="@{dir}" target="@{target}">
                            <property name="cmd.dir" value="${cmd.dir}"/>
                            <property name="build.version" value="${build.version}"/>
                        </x-run-sub-build>
                    </then>
                    <else>
                        <x-run-sub-build dir="@{dir}" target="@{target}">
                            <property name="cmd.dir" value="${cmd.dir}"/>
                        </x-run-sub-build>
                    </else>
                </if>
            </sequential>
        </macrodef>
    </target>

    <!--
    init-defaults
    -->
    <target name="-before-init-defaults"/>
    <target name="-after-init-defaults"/>
    <target name="-init-defaults">
        <property name="build.pkg.manifest" value="pkg.files"/>
        
        <property name="build.compile.example.bootstrap">
            <![CDATA[
            union
                -not
                -tag=package-sencha-core,core
            and
            metadata
                +append
                --base-path=${bootstrap.base.path}
                +loader-paths
                -jsonp=Ext.Loader.addClassPathMappings
                -out=${bootstrap.example.js}
            and
            exclude
                -tag=package-sencha-core,framework
            and
            include
                -namespace=Ext.ux
            and
            metadata
                --base-path=${bootstrap.base.path}
                +alternates
                +append
                -out=${bootstrap.example.js}
            and
            metadata
                --base-path=${bootstrap.base.path}
                +alias
                +append
                -out=${bootstrap.example.js}
            and
            union
                -tag=packageOverrides
            and
            metadata
                --base-path=${bootstrap.base.path}
                +append
                +filenames
                -tpl=Ext.Loader.loadScript("{0}");
                -out=${bootstrap.example.js}
            ]]>
        </property>

        <if>
            <not><isset property="skip.sass"/></not>
            <then>
                <x-normalize-path path="${build.dir}/resources" property="image.search.path"/>
                <property name="build.compile.sass.rtl">
                    <![CDATA[
                    sass
                        -etc=true
                        -vars=true
                        -rules=true
                        -class-name-vars=true
                        -variable=$image-search-path:'${image.search.path}' !default
                        -variable=$theme-name: '${package.name}' !default
                        -output=${build.all.rtl.scss}
                    and
                    sass
                        -ruby=true
                        -output=${build.all.ruby}
                    ]]>
                </property>
                <property name="build.compile.sass">
                    <![CDATA[
                    sass
                        -etc=true
                        -vars=true
                        -rules=true
                        -class-name-vars=true
                        -variable=$image-search-path:'${image.search.path}' !default
                        -variable=$theme-name: '${package.name}' !default
                        -output=${build.all.scss}
                    and
                    sass
                        -ruby=true
                        -output=${build.all.ruby}
                    ]]>
                </property>
            </then>
        </if>

        <property name="build.compile.sass.rtl" value=""/>
        <property name="build.compile.sass" value=""/>

        <property name="build.compile.sass.rtl.filter">
            <![CDATA[
            include
                -all
            ]]>
        </property>

        <property name="build.compile.sass.filter">
            <![CDATA[
            union
                -not
                -namespace=Ext.rtl
            ]]>
        </property>

        <property name="build.compile.sass.rtl.subcommand">
            <![CDATA[
            ${build.compile.sass.rtl.filter}
            and
            ${build.compile.sass.rtl}
            ]]>
        </property>

        <property name="build.compile.sass.subcommand">
            <![CDATA[
            ${build.compile.sass.filter}
            and
            ${build.compile.sass}
            ]]>
        </property>

        <property name="build.compile.sass.command">
            <![CDATA[
            ${build.compile.example.bootstrap}
            and
            ${build.compile.sass.rtl.subcommand}
            and
            ${build.compile.sass.subcommand}
            ]]>
        </property>
        
        <if>
            <equals arg1="theme" arg2="${package.type}"/>
            <then>
                <property name="build.compile.js.filter">
                    <![CDATA[
                        union
                            -tag=package-${package.name}
                        and
                        include
                            -tag=package-${package.name}-base
                    ]]>
                </property>
            </then>
        </if>
        
        <property name="build.compile.js.filter">
            <![CDATA[
            union
                -tag=package-${package.name}
            ]]>
        </property>
        
        <property name="build.compile.js.debug.subcommand">
            <![CDATA[
            -options=${build.compile.js.debug.options}
                ${build.compile.js.filter}
                and
                concatenate
                    -output-file=${build.all.debug.js}
            ]]>
        </property>

        <property name="build.compile.js.subcommand">
            <![CDATA[
            -options=${build.compile.js.options}
                ${build.compile.js.filter}
                and
                # TODO: exclude Ext.cmd.derive
                # optimize
                #    -define-rewrite
                # and
                concatenate
                    ${build.compile.js.compress}
                    -output-file=${build.all.js}
            ]]>
        </property>

        <property name="build.compile.js.command">
            <![CDATA[
            ${build.compile.js.debug.subcommand}
                and
            ${build.compile.js.subcommand}
            ]]>
        </property>

        <if>
            <isset property="skip.style"/>
            <then>
                <property name="build.compile.command">
                    <![CDATA[
                    compile
                        ${build.compile.js.command}
                    ]]>
                </property>
            </then>
        </if>
        
        <property name="build.compile.command">
            <![CDATA[
            compile
                ${build.compile.js.command}
                and
                ${build.compile.sass.command}
            ]]>
        </property>
        
        <property name="build.theme.capture.command">
            <![CDATA[
            theme
                capture
                    -page=${package.sass.dir}/example/theme.html
                    -image=${build.dir}/theme-capture.png
                    -manifest=${build.dir}/theme-capture.json
            ]]>
        </property>
        
        <property name="build.theme.slice.command">
            <![CDATA[
            fs
                slice
                    ${build.slice.options}
                    -image=${build.dir}/theme-capture.png
                    -manifest=${build.dir}/theme-capture.json
                    -out=${build.resources.dir}
            ]]>
        </property>
    </target>

    <!--
    init
    -->
    <target name="init"
            depends="init-local,init-cmd,-before-init,-init,-after-init,-before-init-defaults,-init-defaults,-after-init-defaults"/>

    <!--
    Clean
    -->
    <target name="-before-clean"/>
    <target name="-after-clean"/>
    <target name="clean" depends="init"
            description="Removes all build output produced by the 'build' target">
        <antcall target="-before-clean"/>

        <delete dir="${build.dir}"/>

        <antcall target="clean-subpkgs"/>
        <antcall target="clean-examples"/>
        
        <antcall target="-after-clean"/>
    </target>
    
    <!--
    Build SASS
    -->
    <target name="-before-sass"/>
    <target name="-after-sass"/>
    <target name="sass" depends="init" unless="skip.sass"
            description="Builds the SASS files using Compass">
        <antcall target="-before-sass"/>

        <antcall target="-before-js"/>

        <x-compass-compile
            dir="${build.dir}"
            trace="true"
            boring="true"
            force="true"
            sassdir="${build.dir}"
            cssdir="${build.dir}/resources"
            config="${build.all.ruby}"/>

        <macrodef name="x-compress-css-files">
            <attribute name="dir"/>
            <attribute name="prefix"/>
            <attribute name="outprefix"/>
            <sequential>
                <x-split-css file="@{dir}/@{prefix}.css"
                             outdir="${build.resources.dir}"
                             limit="${build.css.selector.limit}"/>

                <for param="cssfile">
                    <fileset dir="@{dir}" includes="@{prefix}*.css"/>
                    <sequential>
                        <local name="css.output.name"/>
                        <local name="pattern"/>
                        <property name="pattern" value="(.*?)(@{prefix})(_\d{1,2})*\.css"/>
                        <propertyregex property="css.output.name"
                                       input="@{cssfile}"
                                       regexp="${pattern}"
                                       select="\1@{outprefix}\3.css"
                                       override="true"/>
                        <x-compress-css srcfile="@{cssfile}"
                                        outfile="${css.output.name}"/>
                    </sequential>
                </for>
            </sequential>
        </macrodef>

        <x-compress-css-files
            dir="${build.resources.dir}"
            prefix="${build.all.css.debug.prefix}"
            outprefix="${build.all.css.prefix}"/>
        
        <x-compress-css-files
            dir="${build.resources.dir}"
            prefix="${build.all.rtl.css.debug.prefix}"
            outprefix="${build.all.rtl.css.prefix}"/>

        
        <x-get-relative-path
            from="${package.example.dir}"
            to="${package.example.css}"
            property="package.example.css.path"
            />
        
<!--update the app's example to point to the build output-->
<echo file="${package.example.dir}/example.css">
/*
 * This file is generated by Sencha Cmd and should NOT be edited. It redirects
 * to the most recently built CSS file for the application to allow theme.html
 * to load properly for image slicing (required to support non-CSS3 browsers
 * such as IE9 and below).
 */
@import '${package.example.css.path}';
</echo>
        
        
        <antcall target="-after-sass"/>
    </target>
    
    <!--
    Inherit Resources
    -->
    <target name="-before-inherit-resources"/>
    <target name="-after-inherit-resources"/>
    <target name="inherit-resources" depends="init" unless="skip.inherit"
            description="Performs the resource folder inheritance from base theme(s)">
        <antcall target="-before-inherit-resources"/>
        
        <for list="${package.base.packages}" param="base">
            <sequential>
                <local name="base.path"/>
                <local name="base.resource.path"/>
                <property name="base.path" location="@{base}"/>
                <property name="base.resource.path" location="${base.path}/resources"/>
                <echo>Merging resources from base package ${base.path}</echo>
                <if>
                    <available file="${base.resource.path}" type="dir"/>
                    <then>
                        <copy todir="${build.dir}/resources/" overwrite="true">
                            <fileset dir="${base.resource.path}" includes="**/*"/>
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>

        <antcall target="-after-inherit-resources"/>
    </target>
    
    <!--
    Slice
    -->
    <target name="-before-slice"/>
    <target name="-after-slice"/>
    <target name="slice" depends="init" unless="skip.slice"
            description="Slices CSS3 theme to produce non-CSS3 images and sprites">
        <antcall target="-before-slice"/>

        <echo>Capture theme image to ${build.dir}/theme-capture.png</echo>
        <x-sencha-command dir="${package.dir}">
            ${build.theme.capture.command}
        </x-sencha-command>

        <echo>Slicing theme images to ${build.resources.dir}</echo>
        <x-sencha-command dir="${package.dir}">
            ${build.theme.slice.command}
        </x-sencha-command>

        <antcall target="-after-slice"/>
    </target>
    
    <!--
    Copy Resources
    -->
    <target name="-before-copy-resources"/>
    <target name="-after-copy-resources"/>
    <target name="copy-resources" depends="init" unless="skip.resources"
            description="Copy theme resources to folder">
        <antcall target="-before-copy-resources"/>

        <copy todir="${build.dir}/resources" overwrite="true">
            <fileset dir="${package.resources.dir}" includes="**/*"/>
        </copy>

        <antcall target="-after-copy-resources"/>
    </target>
    
    <!--
    Build JS
    -->
    <target name="-before-js"/>
    <target name="-after-js"/>
    <target name="-js">
        <if>
            <not><isset property="skip.style"/></not>
            <then>
<echo file="${bootstrap.example.js}">
/**
 * This file is generated by Sencha Cmd and should NOT be edited.  It is 
 * provided to support globbing requires, custom xtypes, and other 
 * metadata-driven class system features 
 */
</echo>
            </then>
        </if>

        <!--run compile command to generate concatenated output files for js and scss-->
        <x-sencha-command dir="${package.dir}">
            ${build.compile.command}
        </x-sencha-command>
    </target>
    <target name="js" depends="init" unless="skip.js"
            description="Builds the JS files">
        <antcall target="-before-js"/>
        <antcall target="-js"/>
        <antcall target="-after-js"/>
    </target>

    <!--
    Build PKG
    -->
    <target name="-before-pkg"/>
    <target name="-after-pkg"/>
    <target name="pkg" depends="init" unless="skip.pkg"
            description="Builds the PKG file">
        <antcall target="-before-pkg"/>

        <x-make-pkg dir="${package.dir}"
                    files="${build.pkg.manifest}"
                    pkg="${pkg.build.dir}/${pkg.file.name}"
                    temp="${build.dir}/temp"
                    />

        <antcall target="-after-pkg"/>
    </target>

    <!--
    Build
    -->
    <target name="-before-build"/>
    <target name="-build"
            depends="js,inherit-resources,copy-resources,sass,slice,subpkgs,examples,pkg"/>
    <target name="-after-build"/>
    <target name="build"
            depends="init,-before-build,-build,-after-build"
            description="Builds the package"/>

    <!--
    environment setters
    -->

    <!--
    Helpful targets
    -->
    <target name=".props" depends="init"
            description="Lists all properties defined for the build">
        <echoproperties/>
    </target>

    <target name=".help" depends="init"
            description="Provides help on the build script">

        <x-get-project-targets property="help.message"/>

        <echo><![CDATA[${help.message}
This is the main build script for your package.

The following properties can be used to disable certain steps in the build
process.

 * skip.pkg         Do not build the PKG file
 * skip.sass        Do not build the SASS.
 * skip.js          Do not build the JS files.

For details about how these options affect your build, see

    ${basedir}/.sencha/package/build-impl.xml

These options can be stored in a local.properties file in this folder or in the
local.properties file in the workspace.

Alternatively, these can be supplied on the command line. For example:

    sencha ant -Dskip.sass=1 build

To see all currently defined properties, do this:

    sencha ant .props
        ]]></echo>
    </target>

</project>
